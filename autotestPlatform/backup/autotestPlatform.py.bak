#!/usr/bin/env python
#-*- coding: utf-8 -*-
import tornado.web
import tornado.httpserver
import tornado.options
import tornado.ioloop
from tornado.options import define,options

import os
import time
import json

from common.logLib import *
from common.mysqlLib import *

class pjt(tornado.web.RequestHandler):
    def get(self):
        mysql=mysqlLib()
        pjt_list=mysql.query_pjt({"offset":0,"row_cnt":10})
        mysql.close()
        self.render("pjtadd.html",pjt_list=pjt_list)
    def post(self):
        name=self.get_argument("pjt_name").encode('utf-8')
        info=self.get_argument("pjt_info").encode('utf-8')
        mysql=mysqlLib()
        n,last_id=mysql.add_pjt(param=(name,info,0))
        mysql.close()
        ret_dict={"add_result":str(n),"last_id":str(last_id)}
        self.write(json.dumps(ret_dict))
class task(tornado.web.RequestHandler):
    def get(self):
        pjt_id=self.get_argument("pjt_id").encode('utf-8')
        mysql=mysqlLib()
        task_list=mysql.query_task({"offset":0,"row_cnt":10})
        mysql.close()
        self.render("taskadd.html",task_list=task_list,pjt_id=pjt_id)
    def post(self):
        pjt_id=self.get_argument("pjt_id").encode('utf-8')
        name=self.get_argument("name_name").encode('utf-8')
        version=self.get_argument("name_version").encode('utf-8')
        info=self.get_argument("name_info").encode('utf-8')
        testtype=self.get_argument("name_testtype").encode('utf-8')
        processtype=self.get_argument("name_processtype").encode('utf-8')
        filepath=self.get_argument("name_filepath").encode('utf-8')

        param=(pjt_id,name,version,info,testtype,processtype,filepath,0)
        mysql=mysqlLib()
        n,last_id=mysql.add_task(param)
        mysql.close()
        ret_dict={"add_result":str(n),"last_id":str(last_id)}
        self.write(json.dumps(ret_dict))
class assureinfo(tornado.web.RequestHandler):
    def get(self):
        pjt_id=self.get_argument("pjt_id").encode('utf-8')
        task_id=self.get_argument("task_id").encode('utf-8')
        mysql=mysqlLib()
        pjt_list=mysql.query_pjt({"offset":0,"row_cnt":10})
        task_list=mysql.query_task({"offset":0,"row_cnt":10})
        mysql.close()
        self.render("assureinfo.html",task_list=task_list,pjt_list=pjt_list,pjt_id=pjt_id,task_id=task_id)
    def post(self):
        pjt_id=self.get_argument("pjt_id").encode('utf-8')
        task_id=self.get_argument("task_id").encode('utf-8')
        now=datetime.datetime.now().strftime("%y-%m-%d %H:%M:%S")

        mysql=mysqlLib()
        param=(now,task_id)
        n=mysql.update_task_starttime(param)
        param=(1,task_id)
        n=mysql.update_task_status(param)
        mysql.close()
        ret_dict={"update_result":str(n)}
        self.write(json.dumps(ret_dict))
class testrunner(tornado.web.RequestHandler):
    def get(self):
        pjt_id=self.get_argument("pjt_id").encode('utf-8')
        task_id=self.get_argument("task_id").encode('utf-8')
        mysql=mysqlLib()
        pjt_list=mysql.query_pjt({"id":pjt_id,"offset":0,"row_cnt":10})
        task_list=mysql.query_task({"pjt_id":pjt_id,"task_id":task_id,"offset":0,"row_cnt":10})
        mysql.close()
        self.render("testrunner.html",task_list=task_list,pjt_list=pjt_list)
    def post(self):
        try:
            post_param=eval(self.request.body)
            pjt_id=post_param['pjt_id']
            task_id=post_param['task_id']

            mysql=mysqlLib()
            task_list=mysql.query_task({"pjt_id":pjt_id,"task_id":task_id,"offset":0,"row_cnt":10})
            json_data={'status':str(task_list[0][10])}
            self.write(json.dumps(json_data))
        except:
            pass

if __name__ == "__main__":
    settings={"template_path": os.path.join(os.path.dirname(__file__), "template") ,
    "static_path": os.path.join(os.path.dirname(__file__), "static") ,
    "debug":True}
    define("port", default=8080, help="run on the given port", type=int)

    tornado.options.parse_command_line()
    app=tornado.web.Application(handlers=[
    (r"/autotestPlatform/pjt/",pjt),
    (r"/autotestPlatform/task/",task),
    (r"/autotestPlatform/assureinfo/",assureinfo),
    (r"/autotestPlatform/testrunner/",testrunner),
    ],**settings
    )
    HttpServer=tornado.httpserver.HTTPServer(app)
    HttpServer.listen(options.port)
    tornado.ioloop.IOLoop.instance().start()

